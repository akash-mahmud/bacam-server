generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

enum UserAccountStatus {
  active
  verify_email
  banned
  payment_method_needed
}

enum UserRole {
  admin
  superadmin
  public
}

model User {
  id String @id @default(uuid())

  firstname   String
  lastname    String
  avater      String?
  email       String   @unique
  phoneNumber String?
  password    String
  role        UserRole
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
  reveiws     Review[]
  cart        Cart?

  status                UserAccountStatus      @default(verify_email)
  defaultShippingAdress DefaultShippingAdress?
}

model CartItem {
  id         String    @id @default(uuid())
  cartId     String
  productId  String
  product    Product   @relation(fields: [productId], references: [id])
  employeeId String?
  employee   Employee? @relation(fields: [employeeId], references: [id])

  quantity Int
  cart     Cart @relation(fields: [cartId], references: [id])
}

model Cart {
  id String @id @default(uuid())

  userId   String     @unique
  user     User       @relation(fields: [userId], references: [id])
  cartItem CartItem[]
}

model Review {
  id   String @id @default(uuid())
  star Int

  userId    String
  message   String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model MainCategory {
  id         String     @id @default(uuid())
  name       String
  slug       String     @unique
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id             String        @id @default(uuid())
  name           String
  slug           String        @unique
  products       Product[]
  mainCategoryId String?
  mainCategory   MainCategory? @relation(references: [id], fields: [mainCategoryId])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum ProductType {
  readyMate
  custom
}

enum CustomProductStatus {
  minimum_order_needed
  started
}

model FetaureCategory {
  id        String            @id @default(uuid())
  name      String
  fetaures  ProductFteaures[]
  Product   Product?          @relation(fields: [productId], references: [id])
  productId String?
}

model ProductFteaures {
  id                String          @id @default(uuid())
  name              String
  value             String
  fetaurecategoryId String
  productId         String
  product           Product         @relation(fields: [productId], references: [id])
  fetaureCategory   FetaureCategory @relation(fields: [fetaurecategoryId], references: [id])
}

model Product {
  id                        String              @id @default(uuid())
  name                      String
  description               String              @db.Text
  shortdescription          String              @default("") @db.Text
  images                    String[]            @default([])
  price                     Float
  orderStartPrice           Float?              @default(0)
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  slug                      String              @unique
  categoryId                String
  stock                     Int                 @default(0)
  employeeId                String?
  type                      ProductType
  minimumOrderNeededToStart Int
  size                      String[]
  custom_product_status     CustomProductStatus
  fetauresCategories        FetaureCategory[]
  fetaures                  ProductFteaures[]
  category                  Category            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  reveiws                   Review[]
  orderItem                 OrderItem[]
  cartItem                  CartItem[]
  employee                  Employee?           @relation(fields: [employeeId], references: [id])
}

model UserTokens {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id         String    @id @default(uuid())
  productId  String
  product    Product   @relation(fields: [productId], references: [id])
  orderId    String
  order      Order     @relation(fields: [orderId], references: [id])
  qty        Int
  employeeId String?
  employee   Employee? @relation(fields: [employeeId], references: [id])
}

model ShippingAddress {
  id         String @id @default(uuid())
  fullName   String
  address    String
  city       String
  postalCode String
  country    String
  lat        Float
  lng        Float
  orderId    String @unique
  order      Order  @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  pending_pre_payment
  pre_payment_paid
  building
  build_completed
  full_payment_success
  one_time_payment_success
  shipping
  done
}

model PaymentResult {
  id            String @id @default(uuid())
  status        String
  update_time   String
  email_address String
  orderId       String @unique
  order         Order  @relation(fields: [orderId], references: [id])
}

model Order {
  id                              String           @id @default(uuid())
  itemsPrice                      Float
  itemsPrePrice                   Float            @default(0)
  itemsPrePricePaymentSessionId   String?
  itemsTotalPricePaymentSessionId String?
  orderItem                       OrderItem[]
  shippingAddress                 ShippingAddress?
  paymentResult                   PaymentResult?
  shippingPrice                   Float            @default(0)
  taxPrice                        Float            @default(0)
  totalPrice                      Float            @default(0)
  userId                          String
  user                            User             @relation(fields: [userId], references: [id])
  status                          OrderStatus      @default(pending_pre_payment)
  createdAt                       DateTime         @default(now())
  updatedAt                       DateTime         @updatedAt
}

model DefaultShippingAdress {
  id            String @id @default(uuid())
  fullName      String
  address       String
  city          String
  postalCode    String
  country       String
  lat           Float
  shippingPrice Float  @default(0)
  taxPrice      Float  @default(0)
  lng           Float
  userId        String @unique
  user          User   @relation(fields: [userId], references: [id])
}

enum employeeRole {
  analyst
}

model EmployeeCategory {
  id                  String                @id @default(uuid())
  name                String
  slug                String                @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  position            Int                   @default(0)
  employeeSubCategory EmployeeSubCategory[]

  employee Employee[]
}

model EmployeeSubCategory {
  id                 String           @id @default(uuid())
  name               String
  slug               String           @unique
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  employeeCategory   EmployeeCategory @relation(fields: [employeeCategoryId], references: [id])
  employeeCategoryId String

  employee Employee[]
}

model Employee {
  id                    String               @id @default(uuid())
  name                  String
  image                 String
  shortDescription      String               @db.Text
  employeeCategory      EmployeeCategory?    @relation(fields: [employeeCategoryId], references: [id])
  employeeCategoryId    String?
  employeeSubCategory   EmployeeSubCategory? @relation(fields: [employeeSubCategoryId], references: [id])
  products              Product[]
  employeeSubCategoryId String?
  orderItem             OrderItem[]
  cartItem              CartItem[]
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
}
